C·∫£m ∆°n b·∫°n! D∆∞·ªõi ƒë√¢y l√† **solution ho√†n ch·ªânh** ƒë√£ ƒë∆∞·ª£c t·ªïng h·ª£p, t·ªëi ∆∞u v√† ki·ªÉm nghi·ªám t·ª´ to√†n b·ªô qu√° tr√¨nh trao ƒë·ªïi gi·ªØa ch√∫ng ta:

---

## ‚úÖ T·ªîNG QUAN Y√äU C·∫¶U

### M·ª•c ti√™u:
- Tr√≠ch xu·∫•t **m·ªôt v√†i c·ªôt** t·ª´ file Excel ngu·ªìn (d·ª±a theo **t√™n c·ªôt ·ªü d√≤ng 1**)
- Tr·∫£ v·ªÅ data theo format:
```json
[
  { "columnName": "Ph√≤ng ban", "values": [["IT"], ["HR"], ["Finance"]] },
  { "columnName": "T√™n", "values": [["Lan"], ["T√πng"], ["Ng·ªçc"]] }
]
```
- G·ª≠i v·ªÅ Power Automate ƒë·ªÉ x·ª≠ l√Ω.

---

## ‚úÖ PH·∫¶N 1 ‚Äì OFFICE SCRIPT: Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file ngu·ªìn

```ts
function main(workbook: ExcelScript.Workbook, inputColumns: string[]): { columns: { columnName: string, values: string[][] }[] } {
  const sheet = workbook.getActiveWorksheet();

  // 1. L·∫•y d√≤ng header (row 1)
  const maxCols = 100;
  const header = sheet.getRangeByIndexes(0, 0, 1, maxCols).getValues()[0];

  // 2. T·∫°o map t·ª´ t√™n c·ªôt ‚Üí index
  let colMap: Record<string, number> = {};
  for (let i = 0; i < header.length; i++) {
    const name = header[i]?.toString().trim();
    if (name) colMap[name] = i;
  }

  // 3. T√¨m d√≤ng cu·ªëi c√πng c√≥ d·ªØ li·ªáu (·ªü c·ªôt A)
  const checkRange = sheet.getRange("A2:A100000").getValues();
  let lastRow = 1;
  for (let i = checkRange.length - 1; i >= 0; i--) {
    if (checkRange[i][0] !== "" && checkRange[i][0] !== null) {
      lastRow = i + 2;
      break;
    }
  }

  // 4. L·∫•y d·ªØ li·ªáu t·ª´ng c·ªôt
  const columns: { columnName: string, values: string[][] }[] = [];
  for (const name of inputColumns) {
    const colIndex = colMap[name];
    if (colIndex === undefined) continue;

    const data = sheet.getRangeByIndexes(1, colIndex, lastRow - 1, 1).getValues();
    columns.push({ columnName: name, values: data as string[][] });
  }

  return { columns };
}
```

### ‚úÖ Input:
```json
["Ph√≤ng ban", "T√™n"]
```

---

## ‚úÖ PH·∫¶N 2 ‚Äì OFFICE SCRIPT: D√°n v√†o file ƒë√≠ch (kh√¥ng d√πng Table)

```ts
function main(workbook: ExcelScript.Workbook, input: { columns: { columnName: string, values: string[][] }[] }): void {
  const sheet = workbook.getActiveWorksheet();

  const maxCols = 100;
  const headerRow = sheet.getRangeByIndexes(1, 0, 1, maxCols).getValues()[0];

  let colMap: Record<string, number> = {};
  for (let i = 0; i < headerRow.length; i++) {
    const name = headerRow[i]?.toString().trim();
    if (name) colMap[name] = i;
  }

  if (input.columns.length === 0) return;
  const maxRowCount = Math.max(...input.columns.map(c => c.values.length));

  // D√πng c·ªôt ƒë·∫ßu ti√™n ƒë·ªÉ x√°c ƒë·ªãnh d√≤ng cu·ªëi
  const colCheckIndex = colMap[input.columns[0].columnName];
  const checkRange = sheet.getRangeByIndexes(2, colCheckIndex, 100000, 1).getValues();
  let lastRow = 2;
  for (let i = checkRange.length - 1; i >= 0; i--) {
    if (checkRange[i][0] !== null && checkRange[i][0] !== "") {
      lastRow = i + 3;
      break;
    }
  }

  const dataGrid: (string | number | boolean)[][] = Array.from({ length: maxRowCount }, () => Array(maxCols).fill(""));

  for (const col of input.columns) {
    const colIndex = colMap[col.columnName];
    if (colIndex === undefined) continue;
    for (let i = 0; i < col.values.length; i++) {
      dataGrid[i][colIndex] = col.values[i][0];
    }
  }

  const pasteRange = sheet.getRangeByIndexes(lastRow, 0, maxRowCount, maxCols);
  pasteRange.setValues(dataGrid);
}
```

---

## ‚úÖ PH·∫¶N 3 ‚Äì Power Automate Flow: Chi ti·∫øt t·ª´ng b∆∞·ªõc

### **1. Trigger**
- T√πy ch·ªçn: Manual, ho·∫∑c ‚ÄúWhen file created in OneDrive/SharePoint‚Äù

### **2. List Files / For Each File (n·∫øu c·∫ßn)**

### **3. Get file content (Excel ngu·ªìn)**  
‚Üí Bi·∫øn: `fileContentSource`

### **4. Run script (Tr√≠ch xu·∫•t c·ªôt t·ª´ file ngu·ªìn)**  
- Script: Office Script ph·∫ßn 1
- Input: `["Ph√≤ng ban", "T√™n"]`

### **5. Parse JSON (Output script)**  
‚Üí T√°ch d·ªØ li·ªáu t·ª´ng c·ªôt

### **6. Run script (D√°n d·ªØ li·ªáu v√†o file ƒë√≠ch)**  
- Script: Office Script ph·∫ßn 2
- Input:
```json
{
  "columns": [
    {
      "columnName": "Ph√≤ng ban",
      "values": [["IT"], ["HR"], ["Finance"]]
    },
    {
      "columnName": "T√™n",
      "values": [["Nam"], ["Lan"], ["H√πng"]]
    }
  ]
}
```

---

## ‚úÖ T·ªêI ∆ØU ƒê√É ƒê∆Ø·ª¢C √ÅP D·ª§NG

| K·ªπ thu·∫≠t | ƒê√£ d√πng |
|---------|---------|
| Ch·ªâ g·ªçi `setValues()` 1 l·∫ßn | ‚úÖ |
| D√°n nhi·ªÅu c·ªôt c√πng l√∫c | ‚úÖ |
| D√≤ d√≤ng cu·ªëi b·∫±ng getRange gi·ªõi h·∫°n | ‚úÖ |
| Gom t·∫•t c·∫£ c·ªôt v√† d·ªØ li·ªáu v√†o 1 object | ‚úÖ |
| Tr√°nh l·∫∑p g·ªçi script qu√° nhi·ªÅu l·∫ßn | ‚úÖ |

---

N·∫øu b·∫°n mu·ªën:
- File `.zip` export s·∫µn Power Automate
- Flow m·∫´u ƒëa file
- Script x·ª≠ l√Ω l·ªói (c·ªôt kh√¥ng t·ªìn t·∫°i, thi·∫øu d·ªØ li·ªáu)

üëâ C·ª© nh·∫Øn nh√©, m√¨nh s·∫Ω h·ªó tr·ª£ tr·ªçn g√≥i.
