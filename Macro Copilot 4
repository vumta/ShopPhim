Here is the updated VBA code where it first clears all rows from the table while keeping the headers intact. This modification ensures that existing data within the table is removed before copying new data:

```vba
Public Function CopyPasteWithParameters(ByVal sourceFilePath As String, ByVal targetFilePath As String, ByVal columnsToCopy As String) As String
    Dim sourceWorkbook As Workbook
    Dim targetWorkbook As Workbook
    Dim sourceSheet As Worksheet
    Dim targetSheet As Worksheet
    Dim sourceColumns() As String
    Dim targetCol As Integer
    Dim lastRow As Long
    Dim sourceData As Variant
    Dim i As Integer
    Dim targetTable As ListObject

    On Error GoTo ErrorHandler

    ' Open source and target files based on provided paths
    Set sourceWorkbook = Workbooks.Open(sourceFilePath)
    Set targetWorkbook = Workbooks.Open(targetFilePath)
    
    ' Get the first sheet from the source file and the second sheet from the target file
    Set sourceSheet = sourceWorkbook.Sheets(1)
    Set targetSheet = targetWorkbook.Sheets(2)

    ' Convert the column string into an array
    sourceColumns = Split(columnsToCopy, ",")

    ' Identify the table in the target sheet
    If targetSheet.ListObjects.Count > 0 Then
        Set targetTable = targetSheet.ListObjects(1) ' Assuming there's only one table
        ' Clear all rows in the table, keeping the header intact
        If targetTable.DataBodyRange Is Nothing Then
            ' Do nothing if the table has no rows
        Else
            targetTable.DataBodyRange.Delete
        End If
    Else
        CopyPasteWithParameters = "Error: No table found in the target sheet."
        GoTo CleanUp
    End If

    ' Check if the second row in the target sheet has data
    If Application.CountA(targetSheet.Rows(2)) = 0 Then
        CopyPasteWithParameters = "Error: Row 2 in the target sheet has no data. Please check."
        GoTo CleanUp
    End If

    ' Loop through the specified columns
    For i = LBound(sourceColumns) To UBound(sourceColumns)
        ' Find the target column with the same name in row 2 of the target sheet
        On Error Resume Next
        targetCol = 0
        targetCol = Application.Match(sourceColumns(i), targetSheet.Rows(2), 0)
        On Error GoTo 0

        If targetCol > 0 Then
            ' Determine the last row in the source column
            lastRow = sourceSheet.Cells(sourceSheet.Rows.Count, Application.Match(sourceColumns(i), sourceSheet.Rows(1), 0)).End(xlUp).Row

            ' Check if the source column has data
            If lastRow < 2 Then
                CopyPasteWithParameters = "Error: No data found in column " & sourceColumns(i) & " of the source file."
                GoTo CleanUp
            End If

            ' Copy data into an array
            sourceData = sourceSheet.Range(sourceSheet.Cells(2, Application.Match(sourceColumns(i), sourceSheet.Rows(1), 0)), _
                                           sourceSheet.Cells(lastRow, Application.Match(sourceColumns(i), sourceSheet.Rows(1), 0))).Value

            ' Paste data into the target column starting from row 5
            targetSheet.Range(targetSheet.Cells(5, targetCol), targetSheet.Cells(UBound(sourceData, 1) + 4, targetCol)).Value = sourceData
        Else
            CopyPasteWithParameters = "Error: Target column for " & sourceColumns(i) & " not found in the target file."
            GoTo CleanUp
        End If
    Next i

    ' Save and close files
    targetWorkbook.Save
    sourceWorkbook.Close False
    targetWorkbook.Close True

    CopyPasteWithParameters = "Success: Data has been copied and pasted successfully."
    Exit Function

ErrorHandler:
    CopyPasteWithParameters = "Error: An error occurred during execution: " & Err.Description

CleanUp:
    ' Close files if needed
    If Not sourceWorkbook Is Nothing Then sourceWorkbook.Close False
    If Not targetWorkbook Is Nothing Then targetWorkbook.Close True
End Function
```

### Changes Made:
1. **Clear Table Rows While Keeping Headers**:
   - Added functionality to detect and clear all rows of the table in the target sheet, leaving only the header intact.
   - Utilizes `ListObject.DataBodyRange.Delete` to remove existing data in the table.

2. **Error Handling for Missing Tables**:
   - Added a check to ensure the target sheet contains a table.
   - If no table is found, returns an error message.

### Step-by-Step Guide for Using Code in UiPath:
1. **Prepare VBA**:
   - Save the updated code as a `.bas` file.
   - Import the `.bas` file into the Excel workbook.

2. **Use UiPath Workflow**:
   - Open the Excel file with the VBA macro using the **Excel Application Scope** activity.
   - Invoke the `CopyPasteWithParameters` function using the **Invoke VBA** activity.
   - Pass the following parameters:
     - `sourceFilePath`: The absolute path of the source Excel file.
     - `targetFilePath`: The absolute path of the target Excel file.
     - `columnsToCopy`: Comma-separated column names (e.g., `"Column1,Column2,Column3"`).

3. **Process Returned String**:
   - Capture the returned string from the VBA function in UiPath.
   - Use **Write Line** or **Log Message** to display the status of the operation (success or error).

Let me know if you need additional clarification or adjustments! üòä
======================================================================================================================================
D∆∞·ªõi ƒë√¢y l√† phi√™n b·∫£n code ƒë√£ ƒë∆∞·ª£c d·ªãch qua ti·∫øng Vi·ªát:

```vba
Public Function CopyPasteWithParameters(ByVal sourceFilePath As String, ByVal targetFilePath As String, ByVal columnsToCopy As String) As String
    Dim sourceWorkbook As Workbook
    Dim targetWorkbook As Workbook
    Dim sourceSheet As Worksheet
    Dim targetSheet As Worksheet
    Dim sourceColumns() As String
    Dim targetCol As Integer
    Dim lastRow As Long
    Dim sourceData As Variant
    Dim i As Integer
    Dim targetTable As ListObject

    On Error GoTo ErrorHandler

    ' M·ªü file g·ªëc v√† file ƒë√≠ch t·ª´ ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c truy·ªÅn v√†o
    Set sourceWorkbook = Workbooks.Open(sourceFilePath)
    Set targetWorkbook = Workbooks.Open(targetFilePath)
    
    ' L·∫•y sheet ƒë·∫ßu ti√™n t·ª´ file g·ªëc v√† sheet th·ª© hai t·ª´ file ƒë√≠ch
    Set sourceSheet = sourceWorkbook.Sheets(1)
    Set targetSheet = targetWorkbook.Sheets(2)

    ' Chuy·ªÉn c√°c t√™n c·ªôt t·ª´ chu·ªói th√†nh m·∫£ng
    sourceColumns = Split(columnsToCopy, ",")

    ' X√°c ƒë·ªãnh b·∫£ng trong sheet ƒë√≠ch
    If targetSheet.ListObjects.Count > 0 Then
        Set targetTable = targetSheet.ListObjects(1) ' Gi·∫£ ƒë·ªãnh ch·ªâ c√≥ m·ªôt b·∫£ng
        ' X√≥a to√†n b·ªô d√≤ng trong b·∫£ng, gi·ªØ l·∫°i ti√™u ƒë·ªÅ
        If targetTable.DataBodyRange Is Nothing Then
            ' Kh√¥ng l√†m g√¨ n·∫øu b·∫£ng kh√¥ng c√≥ d·ªØ li·ªáu
        Else
            targetTable.DataBodyRange.Delete
        End If
    Else
        CopyPasteWithParameters = "L·ªói: Kh√¥ng t√¨m th·∫•y b·∫£ng trong sheet ƒë√≠ch."
        GoTo CleanUp
    End If

    ' Ki·ªÉm tra xem h√†ng th·ª© 2 trong sheet ƒë√≠ch c√≥ d·ªØ li·ªáu kh√¥ng
    If Application.CountA(targetSheet.Rows(2)) = 0 Then
        CopyPasteWithParameters = "L·ªói: H√†ng th·ª© 2 trong sheet ƒë√≠ch kh√¥ng c√≥ d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra."
        GoTo CleanUp
    End If

    ' Duy·ªát qua c√°c c·ªôt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
    For i = LBound(sourceColumns) To UBound(sourceColumns)
        ' T√¨m c·ªôt ƒë√≠ch c√≥ t√™n gi·ªëng nhau trong h√†ng th·ª© 2 c·ªßa sheet ƒë√≠ch
        On Error Resume Next
        targetCol = 0
        targetCol = Application.Match(sourceColumns(i), targetSheet.Rows(2), 0)
        On Error GoTo 0

        If targetCol > 0 Then
            ' X√°c ƒë·ªãnh s·ªë h√†ng cu·ªëi c√πng trong c·ªôt ngu·ªìn
            lastRow = sourceSheet.Cells(sourceSheet.Rows.Count, Application.Match(sourceColumns(i), sourceSheet.Rows(1), 0)).End(xlUp).Row

            ' Ki·ªÉm tra n·∫øu c·ªôt ngu·ªìn kh√¥ng c√≥ d·ªØ li·ªáu
            If lastRow < 2 Then
                CopyPasteWithParameters = "L·ªói: Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong c·ªôt " & sourceColumns(i) & " c·ªßa file g·ªëc."
                GoTo CleanUp
            End If

            ' Sao ch√©p d·ªØ li·ªáu v√†o m·∫£ng
            sourceData = sourceSheet.Range(sourceSheet.Cells(2, Application.Match(sourceColumns(i), sourceSheet.Rows(1), 0)), _
                                           sourceSheet.Cells(lastRow, Application.Match(sourceColumns(i), sourceSheet.Rows(1), 0))).Value

            ' D√°n d·ªØ li·ªáu v√†o c·ªôt ƒë√≠ch, b·∫Øt ƒë·∫ßu t·ª´ h√†ng th·ª© 5
            targetSheet.Range(targetSheet.Cells(5, targetCol), targetSheet.Cells(UBound(sourceData, 1) + 4, targetCol)).Value = sourceData
        Else
            CopyPasteWithParameters = "L·ªói: Kh√¥ng t√¨m th·∫•y c·ªôt ƒë√≠ch cho " & sourceColumns(i) & " trong file ƒë√≠ch."
            GoTo CleanUp
        End If
    Next i

    ' L∆∞u v√† ƒë√≥ng file
    targetWorkbook.Save
    sourceWorkbook.Close False
    targetWorkbook.Close True

    CopyPasteWithParameters = "Th√†nh c√¥ng: D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c sao ch√©p v√† d√°n th√†nh c√¥ng."
    Exit Function

ErrorHandler:
    CopyPasteWithParameters = "L·ªói: ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh th·ª±c thi: " & Err.Description

CleanUp:
    ' ƒê√≥ng file n·∫øu c·∫ßn thi·∫øt
    If Not sourceWorkbook Is Nothing Then sourceWorkbook.Close False
    If Not targetWorkbook Is Nothing Then targetWorkbook.Close True
End Function
```

### Nh·ªØng c·∫≠p nh·∫≠t:
1. **Chuy·ªÉn to√†n b·ªô n·ªôi dung sang ti·∫øng Vi·ªát**:
   - C√°c ph·∫ßn b√¨nh lu·∫≠n v√† th√¥ng b√°o l·ªói ƒë·ªÅu ƒë√£ ƒë∆∞·ª£c d·ªãch sang ti·∫øng Vi·ªát.

2. **X√≥a to√†n b·ªô d√≤ng trong b·∫£ng nh∆∞ng gi·ªØ l·∫°i ti√™u ƒë·ªÅ**:
   - ƒêo·∫°n code ki·ªÉm tra n·∫øu b·∫£ng t·ªìn t·∫°i v√† x√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong b·∫£ng (kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ti√™u ƒë·ªÅ).

### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:
1. **Chu·∫©n b·ªã file VBA**:
   - L∆∞u ƒëo·∫°n code n√†y th√†nh file `.bas`.
   - Import file `.bas` v√†o file Excel th√¥ng qua VBA Editor (Alt + F11 > File > Import).

2. **T√≠ch h·ª£p v·ªõi UiPath**:
   - S·ª≠ d·ª•ng **Excel Application Scope** ƒë·ªÉ m·ªü file Excel c√≥ macro.
   - D√πng activity **Invoke VBA** ƒë·ªÉ g·ªçi h√†m `CopyPasteWithParameters`.
   - Truy·ªÅn tham s·ªë:
     - `sourceFilePath`: ƒê∆∞·ªùng d·∫´n file g·ªëc (VD: `"C:\DuongDan\FileGoc.xlsx"`).
     - `targetFilePath`: ƒê∆∞·ªùng d·∫´n file ƒë√≠ch (VD: `"C:\DuongDan\FileDich.xlsx"`).
     - `columnsToCopy`: Danh s√°ch t√™n c·ªôt (VD: `"Column1,Column2,Column3"`).

3. **X·ª≠ l√Ω k·∫øt qu·∫£**:
   - L·∫•y chu·ªói k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ VBA v√† x·ª≠ l√Ω trong UiPath (v√≠ d·ª•: ghi nh·∫≠t k√Ω ho·∫∑c hi·ªÉn th·ªã th√¥ng b√°o).

N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m, t√¥i lu√¥n s·∫µn s√†ng gi√∫p nh√©! üòä
