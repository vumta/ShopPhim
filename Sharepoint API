Dưới đây là hướng dẫn chi tiết từng bước để bạn dùng NTLM Authentication trong UiPath, gọi SharePoint REST API:

1. **Lấy danh sách file từ thư mục Source**  
2. **Ghi metadata (tên, đường dẫn) vào Excel**  
3. **Đọc Excel, rồi move từng file sang thư mục Destination**  

---

## 0. Chuẩn bị chung

- Cài package **UiPath.WebAPI.Activities**  
- Import namespace **Newtonsoft.Json.Linq** (nếu cần Deserialize JSON)  
- Tạo một **Sequence** chính, và trong panel **Variables** thêm:

| Tên biến         | Kiểu            | Mô tả                                                       |
|------------------|-----------------|-------------------------------------------------------------|
| `spSiteUrl`      | String          | `https://contoso.sharepoint.com/sites/MySite`              |
| `domain`         | String          | (để trống hoặc `contoso`)                                   |
| `spUsername`     | String          | `user@contoso.com`                                          |
| `spPassword`     | SecureString    | password tương ứng                                          |
| `libraryName`    | String          | Ví dụ `"Shared Documents"`                                  |
| `sourceFolder`   | String          | Ví dụ `"FolderA"`                                           |
| `destFolder`     | String          | Ví dụ `"FolderB"`                                           |
| `excelFilePath`  | String          | Đường dẫn file Excel xuất ra, ví dụ `"C:\temp\Files.xlsx"` |

---

## 1. Lấy FormDigestValue (cho tất cả POST)

1. **Sequence**: **Get Request Digest**  
2. **HTTP Request** activity  
   - **Endpoint**:  
     ```vb
     spSiteUrl + "/_api/contextinfo"
     ```
   - **Method**: POST  
   - **Authentication**: NTLM (Domain/Username/Password như trên)  
   - **Headers**:
     | Name   | Value                             |
     | ------ | --------------------------------- |
     | Accept | `application/json;odata=verbose`  |
   - **Outputs**:
     - **Response** → `digestResponse` (String)  
     - **StatusCode** → `digestStatus` (Int32)  

3. **Deserialize JSON** → lưu vào `jDigest` (JObject)  
4. **Extract**:
   ```vb
   formDigest = jDigest("d")("GetContextWebInformation")("FormDigestValue").ToString
   ```

---

## 2. Lấy danh sách file & ghi vào Excel

### 2.1. Lấy file list

1. **Sequence**: **Get File List**  
2. **HTTP Request** activity  
   - **Endpoint**:
     ```vb
     spSiteUrl + 
       "/_api/web/GetFolderByServerRelativeUrl('/" + libraryName + "/" + sourceFolder + "')/Files"
     ```
   - **Method**: GET  
   - **Authentication**: NTLM  
   - **Headers**:
     | Name   | Value                            |
     | ------ | -------------------------------- |
     | Accept | `application/json;odata=verbose` |
   - **Outputs**:
     - **Response** → `filesResponse` (String)  
     - **StatusCode** → `filesStatus` (Int32)  

3. **If** `filesStatus <> 200` → Throw Exception / Log error  

4. **Deserialize JSON**  
   ```vb
   jFiles = JObject.Parse(filesResponse)("d")("results")
   ```
5. **Build DataTable**  
   - **Activity**: **Build Data Table**  
   - Columns: `"Name"` (String), `"ServerRelativeUrl"` (String)  
   - **Output** → `dtFiles`  

6. **For Each** item in `jFiles` (TypeArgument = JToken)  
   - **Assign**  
     ```vb
     row = dtFiles.NewRow()
     row("Name") = item("Name").ToString
     row("ServerRelativeUrl") = item("ServerRelativeUrl").ToString
     dtFiles.Rows.Add(row)
     ```

### 2.2. Ghi DataTable ra Excel

1. **Excel Application Scope** (`excelFilePath`)  
2. **Write Range** (Sheet1!A1)  
   - **DataTable**: `dtFiles`  
   - **AddHeaders**: True  

---

## 3. Đọc Excel & Move File

### 3.1. Đọc Excel

1. **Sequence**: **Read Excel For Moves**  
2. **Excel Application Scope** (`excelFilePath`)  
3. **Read Range**  
   - **SheetName**: `"Sheet1"`  
   - **Range**: `""` (để lấy toàn sheet)  
   - **Output** → `dtToMove` (DataTable)

### 3.2. Move từng file

1. **For Each Row** in `dtToMove`  
2. **Build**  
   ```vb
   srcUrl = row("ServerRelativeUrl").ToString
   dstUrl = "/" + libraryName + "/" + destFolder + "/" + row("Name").ToString
   movetoEndpoint = spSiteUrl + "/_api/web/GetFileByServerRelativeUrl('" + srcUrl + "')/moveto(newurl='" + dstUrl + "',flags=1)"
   ```
3. **HTTP Request** activity  
   - **Name**: `HTTP_MoveFile`  
   - **Endpoint**: `movetoEndpoint`  
   - **Method**: POST  
   - **Authentication**: NTLM  
   - **Headers**:
     | Name            | Value                              |
     | --------------- | ---------------------------------- |
     | Accept          | `application/json;odata=verbose`   |
     | Content-Type    | `application/json;odata=verbose`   |
     | X-RequestDigest | `formDigest`                       |
   - **Outputs**:
     - **StatusCode** → `moveStatus` (Int32)  
4. **If** `moveStatus = 200 Or moveStatus = 204` → Log “Moved `{row("Name")}` thành công”  
   **Else** → Log “Lỗi di chuyển `{row("Name")}`: {moveStatus}”

---

## 4. Tóm tắt

1. **Get Digest** (1 lần)  
2. **GET /Files** → Build DataTable → Write Excel  
3. **Read Excel** → For Each → POST /moveto → Move file  

Với workflow trên, bạn đã hoàn toàn “skip” Azure AD, dùng NTLM để lấy file list, ghi metadata vào Excel, rồi dựa trên Excel để move file trong SharePoint. Nếu cần thêm paging (nếu >100 file), hoặc lọc file theo extension, bạn chỉ việc thêm `$top`/`$filter` vào URL GET. Chúc bạn thành công!
=======
Dưới đây là hướng dẫn chi tiết từng bước để bạn thiết lập và gọi SharePoint REST API bằng NTLM Authentication trong UiPath. Mình sẽ lấy ví dụ “Lấy danh sách Items” (GET) và “Tạo mới Item” (POST) trên một SharePoint Online site.

---

## 1. Chuẩn bị môi trường

1. Mở UiPath Studio, tạo hoặc mở dự án của bạn.  
2. Vào **Manage Packages** → cài **UiPath.WebAPI.Activities**.  
3. (Nếu cần parse JSON) Vào **Imports** → thêm namespace `Newtonsoft.Json.Linq`.  

---

## 2. Thiết lập biến chung

Trong panel **Variables** của Sequence chính, tạo các biến sau:

| Tên biến       | Kiểu           | Mô tả                                    |
| -------------- | -------------- | ---------------------------------------- |
| `spSiteUrl`    | String         | URL site, ví dụ `https://contoso.sharepoint.com/sites/MySite` |
| `spUsername`   | String         | Tài khoản có quyền truy cập (ví dụ: `user@contoso.com`)       |
| `spPassword`   | SecureString   | Password (kéo thả vào để bảo mật)        |
| `domain`       | String         | Domain (có thể để trống hoặc `contoso`)  |

---

## 3. Lấy danh sách Items (GET)

1. **Tạo Sequence** mới, đặt tên “Get SP List Items”.  
2. **Activity**: **HTTP Request** (UiPath.WebAPI.Activities)  
   - **Name**: `HTTP_GetItems`  
   - **Endpoint**:
     ```
     spSiteUrl + "/_api/web/lists/GetByTitle('MyList')/items"
     ```
   - **Method**: GET  
   - **Authentication**:
     - **Type**: NTLM  
     - **Domain**: `domain`  
     - **Username**: `spUsername`  
     - **Password**: `spPassword`  
   - **Headers**:
     | Name      | Value                                 |
     | --------- | ------------------------------------- |
     | Accept    | `application/json;odata=verbose`      |
   - **Outputs**:
     - **Result** → `itemsResponse` (String)
     - **StatusCode** → `itemsStatus` (Int32)

3. **Kiểm tra StatusCode**  
   - Thêm **If** activity: `itemsStatus = 200`  
     - **Then**: tiếp tục  
     - **Else**: Throw Business Rule Exception (tùy bạn)

4. **Deserialize JSON**  
   - **Activity**: **Deserialize JSON**  
     - **Input**: `itemsResponse`  
     - **TypeArgument**: `Newtonsoft.Json.Linq.JObject`  
     - **Output**: `jItemsObj`

5. **Lấy mảng results**  
   ```vb
   Dim results As JArray = jItemsObj("d")("results")
   ```
6. **For Each**  
   - **TypeArgument**: `Newtonsoft.Json.Linq.JToken`  
   - **Values**: `results`  
   - **Body**: ví dụ `Log Message`: `item("Title").ToString`

---

## 4. Tạo mới Item (POST)

> **Lưu ý**: Với POST/DELETE bạn vẫn cần form‑digest (Request Digest) để đảm bảo session.

### 4.1. Lấy FormDigestValue

1. **Sequence**: “Get Request Digest”  
2. **HTTP Request**  
   - **Name**: `HTTP_GetDigest`  
   - **Endpoint**:  
     ```
     spSiteUrl + "/_api/contextinfo"
     ```
   - **Method**: POST  
   - **Authentication**: giống bước GET (NTLM)  
   - **Headers**:  
     | Name   | Value                           |
     | ------ | ------------------------------- |
     | Accept | `application/json;odata=verbose`|
   - **Outputs**:  
     - `digestResponse` (String)  
     - `digestStatus` (Int32)

3. **Deserialize JSON** → `jDigestObj` (JObject)  
4. **Extract FormDigestValue**  
   ```vb
   formDigest = jDigestObj("d")("GetContextWebInformation")("FormDigestValue").ToString
   ```

### 4.2. Gửi POST tạo Item

1. **Sequence**: “Create SP List Item”  
2. **HTTP Request**  
   - **Name**: `HTTP_CreateItem`  
   - **Endpoint**:  
     ```
     spSiteUrl + "/_api/web/lists/GetByTitle('MyList')/items"
     ```
   - **Method**: POST  
   - **Authentication**: NTLM (giống trên)  
   - **Headers**:  
     | Name            | Value                                        |
     | --------------- | -------------------------------------------- |
     | Authorization   | (bỏ trống với NTLM)                          |
     | Accept          | `application/json;odata=verbose`             |
     | Content-Type    | `application/json;odata=verbose`             |
     | X-RequestDigest | `formDigest` (String)                       |
   - **Body**: chuyển `Body` format = Raw (application/json)
     ```json
     {
       "__metadata": { "type": "SP.Data.MyListListItem" },
       "Title": "Test từ UiPath NTLM",
       "CustomField": "Giá trị NTLM"
     }
     ```
   - **Outputs**:  
     - `createResponse` (String)  
     - `createStatus` (Int32)

3. **Kiểm tra kết quả**  
   - If `createStatus = 201` thì Success, else Throw Exception hoặc log lỗi.

---

## 5. Các lưu ý

- Với **PATCH/MERGE** cho update:  
  - Method = MERGE hoặc PATCH  
  - Thêm header `IF-MATCH: *`  
- Với **DELETE**:  
  - Method = DELETE  
  - Header `IF-MATCH: *`  
- Có thể dùng `$select`, `$filter`, `$top`… trong URL để lọc dữ liệu.

---

Giờ bạn đã có một workflow NTLM‑only, không qua Azure AD, để thực hiện CRUD trên SharePoint List. Nếu còn chỗ nào chưa rõ hoặc cần mở rộng thêm (ví dụ paging, error handling nâng cao…), cứ báo mình nhé!

------------------------------------------------------------------------------------------------------------
Dưới đây là hướng dẫn chi tiết theo từng bước để sử dụng SharePoint Request API trong UiPath:

---

### **Bước 1: Cài đặt các gói cần thiết**
1. Mở **UiPath Studio**.
2. Chọn **Manage Packages** từ menu.
3. Tìm kiếm và cài đặt gói **UiPath.WebAPI.Activities** để sử dụng hoạt động HTTP Request.

---

### **Bước 2: Lấy thông tin SharePoint API**
1. Xác định API endpoint từ SharePoint (ví dụ: URL thư mục, danh sách cần truy cập).
2. Đăng nhập vào SharePoint để lấy Access Token hoặc thông tin xác thực. Bạn có thể sử dụng Microsoft Graph API nếu cần Access Token.

---

### **Bước 3: Thêm hoạt động HTTP Request**
1. Trong UiPath Studio, kéo hoạt động **HTTP Request** từ **Activities Panel** vào workflow.
2. Điền thông tin:
   - **Method**: Chọn GET/POST/PUT/DELETE tùy yêu cầu API.
   - **Endpoint**: Dán URL API SharePoint.

---

### **Bước 4: Cấu hình Headers**
1. Trong thuộc tính **Headers**, thêm:
   - `Authorization`: `Bearer [Access Token]` (trong đó [Access Token] là token bạn vừa lấy được).
   - `Content-Type`: `application/json`.

---

### **Bước 5: Tạo Body (nếu cần)**
1. Nếu bạn thực hiện yêu cầu POST hoặc PUT, tạo dữ liệu dạng JSON cho thuộc tính **Body**:
   ```json
   {
       "Title": "New Item",
       "Description": "This is a test description."
   }
   ```
2. Sử dụng hoạt động **Assign** để tạo Body hoặc nhập trực tiếp vào thuộc tính.

---

### **Bước 6: Xử lý Response**
1. Khi yêu cầu hoàn tất, dữ liệu trả về sẽ được lưu trong Output Variable của hoạt động HTTP Request.
2. Sử dụng hoạt động **Deserialize JSON** để phân tích cú pháp dữ liệu nhận được và sử dụng nó trong workflow.

---

### **Ví dụ thực tế: GET danh sách file từ SharePoint**
1. Sử dụng API Endpoint:
   ```
   https://yoursharepointsite/_api/web/GetFolderByServerRelativeUrl('/YourFolder')/Files
   ```
2. Đặt Header với Access Token:
   ```
   Authorization: Bearer YOUR_ACCESS_TOKEN
   Content-Type: application/json
   ```
3. Xử lý Response để hiển thị danh sách file.

---

Nếu bạn gặp vấn đề cụ thể ở bước nào, hãy cho tôi biết nhé! Tôi có thể hỗ trợ chi tiết hơn! 😊
================================
Để lấy thông tin từ SharePoint API, bạn cần thực hiện các bước dưới đây:

---

### **Bước 1: Xác định mục tiêu**
- Xác định những gì bạn muốn thực hiện thông qua API, ví dụ như:
  - Lấy danh sách file hoặc folder.
  - Thêm, sửa hoặc xóa dữ liệu trong danh sách hoặc thư mục.
  - Truy xuất thông tin user, nhóm hoặc quyền.

---

### **Bước 2: Lấy URL SharePoint Site**
- Đăng nhập vào trang SharePoint của bạn.
- Xác định URL của trang web hoặc thư mục bạn cần truy cập, ví dụ: `https://yoursharepointsite.sharepoint.com`.

---

### **Bước 3: Kích hoạt SharePoint API**
- API của SharePoint thường được tích hợp sẵn, bạn chỉ cần xác định đúng endpoint phù hợp:
  - **Danh sách (List):** `/sites/{siteName}/_api/web/lists`
  - **Thư mục (Folder):** `/sites/{siteName}/_api/web/GetFolderByServerRelativeUrl('/FolderName')`

---

### **Bước 4: Lấy Access Token**
Để sử dụng SharePoint API, bạn cần Access Token để xác thực:
1. Đăng ký ứng dụng với Azure Active Directory.
   - Điều này cho phép bạn cấp quyền truy cập cho ứng dụng của mình.
2. Tạo Client ID và Client Secret khi đăng ký ứng dụng.
3. Sử dụng **OAuth 2.0** để lấy Access Token từ Microsoft Graph API hoặc Azure AD.

---

### **Bước 5: Tìm Endpoint API**
- Mở [SharePoint API Documentation](https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/sharepoint-net-server-and-rest-service-reference) để tìm danh sách các API endpoint phù hợp với nhu cầu của bạn.

---

### **Bước 6: Kiểm tra và thử nghiệm**
- Sử dụng công cụ như Postman để thử nghiệm API:
  - Thêm Access Token vào phần **Headers**.
  - Gửi yêu cầu GET, POST, PUT, DELETE đến đúng endpoint.

---

Nếu bạn cần thêm trợ giúp để thực hiện các bước này hoặc có thắc mắc cụ thể, hãy cho tôi biết nhé! 😊
===============================
Dưới đây là hướng dẫn chi tiết từng bước để lấy Access Token từ Azure Active Directory (Azure AD) để sử dụng với SharePoint API:

---

### **Bước 1: Đăng nhập vào Azure Portal**
1. Truy cập [Azure Portal](https://portal.azure.com).
2. Đăng nhập bằng tài khoản quản trị viên.

---

### **Bước 2: Đăng ký ứng dụng**
1. Trong Azure Portal, vào mục **Azure Active Directory** > **App registrations**.
2. Chọn **New registration**.
3. Điền thông tin:
   - **Name**: Đặt tên cho ứng dụng (ví dụ: "SharePointAPIApp").
   - **Supported account types**: Chọn **Single tenant** hoặc **Multi-tenant** tùy thuộc vào nhu cầu.
   - **Redirect URI**: Để trống hoặc điền URL nếu bạn sử dụng ứng dụng có giao diện người dùng.
4. Nhấn **Register** để hoàn tất.

---

### **Bước 3: Tạo Client ID và Client Secret**
1. Sau khi đăng ký ứng dụng, bạn sẽ thấy **Application (client) ID**. Lưu lại thông tin này.
2. Vào mục **Certificates & secrets**.
3. Chọn **New client secret**.
   - Điền mô tả.
   - Chọn thời hạn hết hạn (ví dụ: 6 tháng, 12 tháng).
4. Nhấn **Add** và lưu lại **Value** của Client Secret.

---

### **Bước 4: Cấp quyền cho ứng dụng**
1. Vào mục **API permissions** của ứng dụng.
2. Chọn **Add a permission**.
3. Chọn **Microsoft Graph** hoặc **SharePoint** tùy nhu cầu.
4. Chọn quyền (ví dụ: `Sites.ReadWrite.All`, `Sites.Read.All`).
5. Nhấn **Grant admin consent** để cấp quyền cho ứng dụng.

---

### **Bước 5: Lấy Access Token**
1. Sử dụng công cụ như Postman hoặc code để gửi yêu cầu lấy Access Token. 
2. Gửi yêu cầu HTTP POST đến endpoint:
   ```
   https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token
   ```
   - `{tenant_id}` là ID của tenant trong Azure AD.
3. Trong Body của yêu cầu, nhập:
   ```json
   {
       "grant_type": "client_credentials",
       "client_id": "[Client ID]",
       "client_secret": "[Client Secret]",
       "scope": "https://graph.microsoft.com/.default"
   }
   ```
4. Khi yêu cầu hoàn tất, bạn sẽ nhận được Access Token trong phần phản hồi.

---

### **Bước 6: Sử dụng Access Token**
1. Thêm Access Token này vào **Headers** của các yêu cầu API SharePoint.
   ```
   Authorization: Bearer [Access Token]
   ```

---

Nếu bạn gặp khó khăn ở bất kỳ bước nào, tôi rất sẵn lòng hướng dẫn chi tiết thêm. Bạn muốn thử bước nào trước? 😊
