D∆∞·ªõi ƒë√¢y l√† **guide to√†n b·ªô flow UiPath step-by-step**, ƒë√£ bao g·ªìm c√°c y√™u c·∫ßu n√¢ng cao:

---

# üß† M·ª•c ti√™u t·ªïng th·ªÉ

1. **X·ª≠ l√Ω nhi·ªÅu file Excel** trong m·ªôt folder.
2. **L·∫•y c·ªôt theo danh s√°ch c·∫•u h√¨nh** t·ª´ file `ColumnConfig.xlsx`.
3. **Mapping ƒë√∫ng c·ªôt, ƒë√∫ng th·ª© t·ª± theo file ƒë√≠ch**.
4. **Ghi log ti·∫øn tr√¨nh x·ª≠ l√Ω** t·ª´ng file.
5. **Chia batch 10.000 d√≤ng** ƒë·ªÉ tr√°nh l·ªói `Stop Job 0xE434352`.
6. **Append d·ªØ li·ªáu** v√†o file ƒë√≠ch t·ª´ d√≤ng 4 tr·ªü ƒëi, kh√¥ng tr√πng l·∫∑p d·ªØ li·ªáu.

---

# üìÅ C·∫•u tr√∫c file c·∫ßn chu·∫©n b·ªã

| T√™n file | √ù nghƒ©a |
|----------|---------|
| `SourceFiles/` | Ch·ª©a nhi·ªÅu file ngu·ªìn (Excel) |
| `destination.xlsx` | File ƒë√≠ch, ch·ª©a header ·ªü d√≤ng 2, d√°n data t·ª´ d√≤ng 4 |
| `ColumnConfig.xlsx` | File ƒë·ªãnh nghƒ©a danh s√°ch t√™n c·ªôt c·∫ßn l·∫•y |
| `Logs/` | Th∆∞ m·ª•c l∆∞u file log `.txt`

---

# ‚úÖ Chi ti·∫øt c√°c b∆∞·ªõc th·ª±c hi·ªán trong UiPath

---

## üîß **Bi·∫øn c·∫ßn khai b√°o**
| T√™n bi·∫øn           | Ki·ªÉu d·ªØ li·ªáu                         |
|--------------------|--------------------------------------|
| `sourceFolder`     | `String` ‚Äì `"Path\to\SourceFiles"`   |
| `columnConfigPath` | `String` ‚Äì `"Path\to\ColumnConfig.xlsx"` |
| `destinationPath`  | `String` ‚Äì `"Path\to\destination.xlsx"` |
| `logFilePath`      | `String` ‚Äì `"Logs\log_" + Now.ToString("yyyyMMdd_HHmmss") + ".txt"` |
| `filesList`        | `String[]` ‚Äì danh s√°ch file ngu·ªìn |
| `columnList`       | `List(Of String)` ‚Äì t√™n c·ªôt c·∫ßn l·∫•y |
| `dtDestHeader`     | `DataTable` ‚Äì header file ƒë√≠ch |
| `globalRowIndex`   | `Integer` ‚Äì ch·ªâ s·ªë d√≤ng ghi ti·∫øp theo trong file ƒë√≠ch |

---

## üß± 1. ƒê·ªçc c·∫•u h√¨nh c·ªôt

**Read Range Workbook**
- File: `columnConfigPath`
- Sheet: `"Sheet1"`
- Output: `dtConfig`

**Assign**
```vb
columnList = (From row In dtConfig.AsEnumerable()
              Select row("ColumnName").ToString.Trim).ToList()
```

---

## üìÇ 2. L·∫∑p qua danh s√°ch file ngu·ªìn

**Assign**
```vb
filesList = Directory.GetFiles(sourceFolder, "*.xlsx")
```

**For Each** `filePath In filesList`

---

### Trong v√≤ng l·∫∑p `For Each file`:

---

### üßæ 2.1 Ghi log b·∫Øt ƒë·∫ßu

**Append Line**
```vb
Text: logFilePath  
TextToAppend: $"[{Now}] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: {Path.GetFileName(filePath)}"
```

---

### üìÑ 2.2 ƒê·ªçc file ngu·ªìn kh√¥ng header

**Read Range Workbook**
- File: `filePath`
- AddHeaders: `False`
- Output: `dtSource`

---

### üìÑ 2.3 ƒê·ªçc header file ƒë√≠ch

**Read Range Workbook**
- File: `destinationPath`
- Range: `"2:2"`
- AddHeaders: `True`
- Output: `dtDestHeader`

---

### üß† 2.4 Mapping d·ªØ li·ªáu

**Invoke Code ‚Äì Mapping & Filter Column**

**In Arguments:**
- `dtSource`, `dtDestHeader`, `columnList`
**Out:** `dtFinal`

**Code:**
```vbnet
' T·∫°o t·ª´ ƒëi·ªÉn t√™n c·ªôt -> index trong dtSource
Dim columnIndexMap As New Dictionary(Of String, Integer)
For i As Integer = 0 To dtSource.Columns.Count - 1
    Dim header As String = dtSource.Rows(0)(i).ToString.Trim()
    If Not columnIndexMap.ContainsKey(header) Then
        columnIndexMap(header) = i
    End If
Next

' Chu·∫©n b·ªã dtFinal ƒë√∫ng c·ªôt ƒë√≠ch
dtFinal = New DataTable()
Dim destIndexes As New List(Of Integer)

For Each destCol As DataColumn In dtDestHeader.Columns
    Dim colName = destCol.ColumnName.Trim()
    dtFinal.Columns.Add(colName)

    If columnList.Contains(colName) AndAlso columnIndexMap.ContainsKey(colName) Then
        destIndexes.Add(columnIndexMap(colName))
    Else
        destIndexes.Add(-1)
    End If
Next

' L·∫∑p t·ª´ d√≤ng 2 tr·ªü ƒëi (b·ªè header trong dtSource)
For i As Integer = 1 To dtSource.Rows.Count - 1
    Dim srcRow = dtSource.Rows(i)
    Dim newRow = dtFinal.NewRow()

    For j As Integer = 0 To destIndexes.Count - 1
        Dim index = destIndexes(j)
        If index >= 0 Then
            newRow(j) = srcRow(index)
        End If
    Next

    dtFinal.Rows.Add(newRow)
Next
```

---

### ü™Ñ 2.5 Chia batch v√† ghi v√†o file ƒë√≠ch

**Assign**
```vb
globalRowIndex = GetNextAvailableRow(destinationPath, "Sheet1", 4) ' Custom Function
```

**For Each indexBatch In Enumerable.Range(0, Math.Ceiling(dtFinal.Rows.Count / 10000)).ToList()**

---

#### Trong v√≤ng `For Each batch`:

**Assign**
```vb
dtBatch = dtFinal.AsEnumerable().Skip(indexBatch * 10000).Take(10000).CopyToDataTable()
```

**Write Range Workbook**
- File: `destinationPath`
- Sheet: `"Sheet1"`
- Cell: `"A" + (globalRowIndex + indexBatch * 10000).ToString()`
- AddHeaders: `False`
- DataTable: `dtBatch`

---

### üì¶ 2.6 Log ho√†n th√†nh

**Append Line**
```vb
TextToAppend: $"[{Now}] ‚úÖ ƒê√£ x·ª≠ l√Ω xong file: {Path.GetFileName(filePath)} ‚Äì {dtFinal.Rows.Count} d√≤ng"
```

---

## üîç H√†m ph·ª• `GetNextAvailableRow`

**Invoke Code (VB)**  
**In:** `filePath As String`, `sheetName As String`, `startRow As Integer`  
**Out:** `nextRow As Integer`

**Code:**
```vbnet
Dim excel As New Microsoft.Office.Interop.Excel.Application
Dim wb = excel.Workbooks.Open(filePath)
Dim ws = CType(wb.Sheets(sheetName), Microsoft.Office.Interop.Excel.Worksheet)

nextRow = startRow
Do While Not String.IsNullOrEmpty(ws.Cells(nextRow, 1).Text.ToString())
    nextRow += 1
Loop

wb.Close(False)
excel.Quit()
```

---

## üßæ Log m·∫´u

```text
[2025-04-11 11:00:02] B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: Source_1.xlsx
[2025-04-11 11:00:08] ‚úÖ ƒê√£ x·ª≠ l√Ω xong file: Source_1.xlsx ‚Äì 45000 d√≤ng
...
```

---

## üîö K·∫øt th√∫c flow

**Log t·ªïng k·∫øt**
**Send email (tu·ª≥ ch·ªçn)**
**Di chuy·ªÉn file ƒë√£ x·ª≠ l√Ω (tu·ª≥ ch·ªçn)**

---

## ‚úÖ T·ªïng k·∫øt

B·∫°n ƒë√£ c√≥:

- X·ª≠ l√Ω nhi·ªÅu file
- L·∫•y c·ªôt theo config
- Ghi batch nhanh & kh√¥ng l·ªói ghi
- Logging r√µ r√†ng

---

üì¶ N·∫øu b·∫°n mu·ªën m√¨nh:
- G·ª≠i to√†n b·ªô file `.xaml`, `.xlsx` m·∫´u  
- Zip project ho√†n ch·ªânh

üëâ Ch·ªâ c·∫ßn b·∫£o "G·ª≠i file", m√¨nh n√©n v√† g·ª≠i ngay.  
B·∫°n c√≥ mu·ªën m√¨nh xu·∫•t ra lu√¥n kh√¥ng?
