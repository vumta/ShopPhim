C·∫£m ∆°n b·∫°n ƒë√£ ch·ªâ r√µ ‚Äî v·∫•n ƒë·ªÅ n·∫±m ·ªü ch·ªó **c√°ch hi·ªÉu sai c·∫•u tr√∫c d·ªØ li·ªáu `values`**, khi·∫øn script d√°n t·∫•t c·∫£ data v√†o **m·ªôt √¥ duy nh·∫•t**, thay v√¨ nhi·ªÅu d√≤ng. D∆∞·ªõi ƒë√¢y l√† c√°ch x·ª≠ l√Ω chu·∫©n ƒë·ªÉ d√°n data d·∫°ng `string[][]` v√†o **nhi·ªÅu h√†ng, 1 c·ªôt**.

---

## ‚úÖ C·∫¨P NH·∫¨T CODE PH·∫¶N 3 ‚Äì D√°n 1 c·ªôt, nhi·ªÅu d√≤ng (1 batch)

```ts
function main(workbook: ExcelScript.Workbook, input: { columnName: string, values: string[][] }): void {
  const sheet = workbook.getActiveWorksheet();

  const maxCols = 100;
  const headerRow = sheet.getRangeByIndexes(1, 0, 1, maxCols).getValues()[0];

  let colMap: Record<string, number> = {};
  for (let i = 0; i < headerRow.length; i++) {
    const name = headerRow[i]?.toString().trim();
    if (name) colMap[name] = i;
  }

  const colIndex = colMap[input.columnName];
  if (colIndex === undefined) return;

  // T√¨m d√≤ng cu·ªëi c√πng c√≥ d·ªØ li·ªáu trong c·ªôt ƒë∆∞·ª£c ch·ªçn
  const checkRange = sheet.getRangeByIndexes(2, colIndex, 100000, 1).getValues();
  let lastRow = 2;
  for (let i = checkRange.length - 1; i >= 0; i--) {
    if (checkRange[i][0] !== null && checkRange[i][0] !== "") {
      lastRow = i + 3;
      break;
    }
  }

  const rowCount = input.values.length;

  // D√°n ƒë√∫ng t·ª´ng h√†ng (c·ªôt c·ªë ƒë·ªãnh)
  const targetRange = sheet.getRangeByIndexes(lastRow, colIndex, rowCount, 1);
  targetRange.setValues(input.values);
}
```

---

## üìå Gi·∫£i th√≠ch:
- `input.values` c√≥ d·∫°ng:  
  ```ts
  [["IT"], ["HR"], ["Finance"]] // 3 h√†ng, 1 c·ªôt
  ```
- `getRangeByIndexes(lastRow, colIndex, rowCount, 1)` ‚Üí l·∫•y ƒë√∫ng s·ªë d√≤ng v√† c·ªôt ƒë·ªÉ d√°n
- `setValues(input.values)` nh·∫≠n ƒë∆∞·ª£c `string[][]`, m·ªói ph·∫ßn t·ª≠ l√† 1 d√≤ng ‚Üí **s·∫Ω d√°n m·ªói gi√° tr·ªã v√†o 1 h√†ng kh√°c nhau**

---

## ‚úÖ K·∫øt qu·∫£ sau khi d√°n:
|   | A          | B          |
|---|------------|------------|
| 1 | ...        |            |
| 2 | (header)   | (header)   |
| 3 | ...        | ...        |
| 4 |            | **IT**     |
| 5 |            | **HR**     |
| 6 |            | **Finance**|

---

N·∫øu b·∫°n c·∫ßn chia `input.values` th√†nh nhi·ªÅu batch ·ªü Power Automate, ch·ªâ c·∫ßn gi·ªØ ƒë√∫ng c·∫•u tr√∫c:  
```json
"values": [["IT"], ["HR"], ["Finance"]]
```

L√† s·∫Ω ho·∫°t ƒë·ªông ho√†n h·∫£o üéØ

---  
C·∫ßn m√¨nh g·ª≠i l·∫°i flow `.zip` m·∫´u chia batch ho·∫∑c x·ª≠ l√Ω ƒëa c·ªôt song song th√¨ c·ª© nh·∫Øn nh√©!
