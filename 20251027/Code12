C·∫£m ∆°n ‚Äî m√¨nh ƒë√£ hi·ªÉu r√µ t√¨nh tr·∫°ng: khi d√πng ws.Copy m√† kh√¥ng thao t√°c ƒë√∫ng workbook/object th√¨ SaveAs g·ªçi tr√™n workbook m·ªõi s·∫Ω b√°o l·ªói 1004 (th∆∞·ªùng v√¨ macro thao t√°c tr√™n ActiveWorkbook sai ng·ªØ c·∫£nh). D∆∞·ªõi ƒë√¢y l√† m√£ VBA s·ª≠a tri·ªát ƒë·ªÉ ‚Äî ch·∫Øc ch·∫Øn tham chi·∫øu t·ªõi workbook m·ªõi b·∫±ng object newWb (kh√¥ng ph·ª• thu·ªôc ActiveWorkbook), x√≥a sheets m·∫∑c ƒë·ªãnh, sanitize t√™n file, retry SaveAs, fallback SaveCopyAs, ghi log, v√† kh√¥ng hi·ªán MsgBox (ph√π h·ª£p ch·∫°y qua UiPath).

B·∫°n d√°n v√†o file .bas (v√≠ d·ª• ExportSheet_Fix_SaveAs.bas) r·ªìi g·ªçi b·∫±ng UiPath Invoke VBA nh∆∞ tr∆∞·ªõc.


---

‚úÖ ƒêi·ªÅu code l√†m kh√°c (v√¨ sao fix ƒë∆∞·ª£c l·ªói 1004)

T·∫°o newWb = Workbooks.Add r·ªìi copy sheet v√†o newWb b·∫±ng ws.Copy After:=newWb.Sheets(newWb.Sheets.Count) (thay v√¨ rely ActiveWorkbook).

X√≥a c√°c sheet m·∫∑c ƒë·ªãnh trong newWb ‚Äî ƒë·∫£m b·∫£o ch·ªâ c√≤n sheet copy.

G·ªçi newWb.SaveAs tr·ª±c ti·∫øp tr√™n object newWb.

Th√™m retry + fallback SaveCopyAs + ki·ªÉm tra file lock.

Kh√¥ng d√πng ThisWorkbook (th∆∞·ªùng g√¢y nh·∫ßm khi macro n·∫±m trong add-in) m√† d√πng Application.ActiveWorkbook ƒë·ªÉ l·∫•y workbook m√† UiPath ƒëang m·ªü.



---

M√£ VBA (l∆∞u file .bas)

Attribute VB_Name = "ExportSheet_Fix_SaveAs"
Option Explicit

' Numeric constants (an to√†n v·ªõi nhi·ªÅu b·∫£n Excel)
Private Const XL_OPENXML_WORKBOOK As Long = 51
Private Const XL_CSV As Long = 6
Private Const XL_CSVUTF8 As Long = 62

Public Sub ExportSheet_Fix_SaveAs(SheetName As String, OutputFolder As String, Optional FileFormat As String = "xlsx")
    On Error GoTo ErrHandler

    Dim srcWb As Workbook
    Dim ws As Worksheet
    Dim newWb As Workbook
    Dim sh As Worksheet
    Dim safeName As String
    Dim targetPath As String
    Dim tmpPath As String
    Dim logPath As String
    Dim fso As Object
    Dim attempts As Long, saved As Boolean
    Dim lastErr As String

    ' Normalize folder
    If Right(OutputFolder, 1) = Application.PathSeparator Then
        OutputFolder = Left(OutputFolder, Len(OutputFolder) - 1)
    End If
    logPath = OutputFolder & Application.PathSeparator & "ExportLog.txt"

    If Dir(OutputFolder, vbDirectory) = "" Then
        WriteLog logPath, "ERROR: Output folder not found: " & OutputFolder
        Exit Sub
    End If

    ' Use the workbook that UiPath opened (ActiveWorkbook)
    Set srcWb = Application.ActiveWorkbook
    If srcWb Is Nothing Then
        WriteLog logPath, "ERROR: No active workbook (UiPath did not open workbook?)."
        Exit Sub
    End If

    On Error Resume Next
    Set ws = srcWb.Worksheets(SheetName)
    On Error GoTo ErrHandler
    If ws Is Nothing Then
        WriteLog logPath, "ERROR: Sheet not found: " & SheetName
        Exit Sub
    End If

    safeName = MakeSafeFileName(SheetName)
    If Len(safeName) = 0 Then safeName = "SheetExport"

    If LCase(FileFormat) = "csv" Then
        targetPath = OutputFolder & Application.PathSeparator & safeName & ".csv"
    Else
        targetPath = OutputFolder & Application.PathSeparator & safeName & ".xlsx"
    End If
    tmpPath = OutputFolder & Application.PathSeparator & safeName & "_" & Format(Now, "yyyymmdd_hhnnss") & ".tmp"

    Set fso = CreateObject("Scripting.FileSystemObject")

    ' Create a brand-new workbook and copy the sheet into it
    Set newWb = Workbooks.Add
    ' Copy the sheet into newWb (after last sheet)
    ws.Copy After:=newWb.Sheets(newWb.Sheets.Count)

    ' Remove default empty sheets in newWb (except the copied one)
    Application.DisplayAlerts = False
    For Each sh In newWb.Worksheets
        If sh.Name <> ws.Name Then
            On Error Resume Next
            sh.Delete
            On Error GoTo ErrHandler
        End If
    Next sh
    Application.DisplayAlerts = True

    ' Ensure we reference newWb explicitly
    If newWb Is Nothing Then
        WriteLog logPath, "ERROR: new workbook not created."
        Exit Sub
    End If

    ' Try SaveAs with retries
    saved = False
    lastErr = ""
    For attempts = 1 To 3
        On Error Resume Next
        newWb.Activate
        DoEvents
        If LCase(FileFormat) = "csv" Then
            newWb.SaveAs Filename:=targetPath, FileFormat:=XL_CSVUTF8
        Else
            newWb.SaveAs Filename:=targetPath, FileFormat:=XL_OPENXML_WORKBOOK
        End If

        If Err.Number = 0 Then
            saved = True
            Exit For
        Else
            lastErr = "Attempt " & attempts & " Err " & Err.Number & " - " & Err.Description
            WriteLog logPath, "WARN: " & lastErr
            Err.Clear
            Sleep 300
        End If
        On Error GoTo ErrHandler
    Next attempts

    ' Fallback: SaveCopyAs then move file
    If Not saved Then
        On Error Resume Next
        newWb.SaveCopyAs tmpPath
        If Err.Number = 0 Then
            ' delete existing target if not locked
            If fso.FileExists(targetPath) Then
                If Not IsFileLocked(targetPath) Then
                    On Error Resume Next
                    fso.DeleteFile targetPath, True
                    If Err.Number <> 0 Then
                        WriteLog logPath, "WARN: unable delete existing target: " & Err.Number & " - " & Err.Description
                        Err.Clear
                    End If
                Else
                    WriteLog logPath, "ERROR: target exists and is locked: " & targetPath
                End If
            End If
            On Error Resume Next
            fso.MoveFile Source:=tmpPath, Destination:=targetPath
            If Err.Number = 0 Then
                saved = True
            Else
                WriteLog logPath, "WARN: MoveFile failed: " & Err.Number & " - " & Err.Description
                Err.Clear
            End If
        Else
            WriteLog logPath, "WARN: SaveCopyAs failed: " & Err.Number & " - " & Err.Description
            Err.Clear
        End If
        On Error GoTo ErrHandler
    End If

    ' Close new workbook
    On Error Resume Next
    newWb.Close SaveChanges:=False
    On Error GoTo ErrHandler

    If saved Then
        WriteLog logPath, "SUCCESS: Exported '" & SheetName & "' -> " & targetPath
    Else
        WriteLog logPath, "ERROR: Failed to save exported workbook for sheet '" & SheetName & "'. LastErr: " & lastErr
    End If

    Exit Sub

ErrHandler:
    On Error Resume Next
    Application.DisplayAlerts = True
    If Not newWb Is Nothing Then newWb.Close SaveChanges:=False
    WriteLog logPath, "ERROR: (" & Err.Number & ") " & Err.Description & " when exporting sheet '" & SheetName & "'."
End Sub

' ---------- Helpers ----------
Private Function MakeSafeFileName(s As String) As String
    Dim arr As Variant, i As Long
    arr = Array("\", "/", ":", "*", "?", """", "<", ">", "|")
    MakeSafeFileName = s
    For i = LBound(arr) To UBound(arr)
        MakeSafeFileName = Replace(MakeSafeFileName, arr(i), "_")
    Next i
    MakeSafeFileName = Trim(MakeSafeFileName)
    If Len(MakeSafeFileName) > 120 Then MakeSafeFileName = Left(MakeSafeFileName, 120)
End Function

Private Sub WriteLog(logPath As String, msg As String)
    Dim fNum As Integer
    fNum = FreeFile
    On Error Resume Next
    Open logPath For Append As #fNum
    If Err.Number = 0 Then
        Print #fNum, Now & " - " & msg
        Close #fNum
    Else
        Debug.Print Now & " - " & msg
    End If
    On Error GoTo 0
End Sub

Private Function IsFileLocked(filePath As String) As Boolean
    Dim hFile As Long
    On Error GoTo Locked
    hFile = FreeFile
    Open filePath For Binary Access Read Write Lock Read Write As #hFile
    Close #hFile
    IsFileLocked = False
    Exit Function
Locked:
    IsFileLocked = True
    On Error GoTo 0
End Function

Private Sub Sleep(ms As Long)
    Dim t0 As Single
    t0 = Timer
    Do While Timer < t0 + ms / 1000
        DoEvents
    Loop
End Sub


---

üîß H∆∞·ªõng d·∫´n g·ªçi b·∫±ng UiPath (nh·∫Øc l·∫°i)

M·ªü file Excel b·∫±ng Excel Application Scope (kh√¥ng ƒë·ªÉ ReadOnly).

Invoke VBA:

Code file path: C:\path\ExportSheet_Fix_SaveAs.bas

Entry method name: ExportSheet_Fix_SaveAs

Parameters (In/String):

1. "T√™nSheetC·∫ßnXu·∫•t"


2. "C:\OutputFolder" (th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i)


3. "xlsx" ho·∫∑c "csv"






---

üîç N·∫øu v·∫´n g·∫∑p 1004 ‚Äî l√†m ngay 3 vi·ªác v√† g·ª≠i cho m√¨nh

1. M·ªü file ExportLog.txt trong folder ƒë√≠ch v√† copy d√≤ng l·ªói cu·ªëi c√πng v√†o ƒë√¢y.


2. Cho bi·∫øt b·∫°n l∆∞u v√†o ·ªï local (C:...) hay network share (\server...).


3. Cho bi·∫øt t√™n sheet m·∫´u (v√≠ d·ª• Report_2025/ABC? n·∫øu c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát).



M√¨nh s·∫Ω ph√¢n t√≠ch log (Err.Number/Err.Description) v√† ƒë∆∞a b·∫£n s·ª≠a/ch·ªâ d·∫´n ch√≠nh x√°c (v√≠ d·ª•: ƒë·ªïi permission, s·ª≠a Protected View, map network drive, ho·∫∑c ƒë·ªïi tham s·ªë FileFormat).


---

N·∫øu b·∫°n mu·ªën m√¨nh xu·∫•t file .bas s·∫µn ƒë·ªÉ b·∫°n t·∫£i, m√¨nh s·∫Ω d√°n n·ªôi dung file d∆∞·ªõi d·∫°ng plain text ƒë·ªÉ b·∫°n l∆∞u nhanh. B·∫°n mu·ªën m√¨nh l√†m file ƒë√≥ kh√¥ng?
