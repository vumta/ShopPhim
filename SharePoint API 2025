Tuy·ªát v·ªùi! D∆∞·ªõi ƒë√¢y l√† **h∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc** ƒë·ªÉ b·∫°n x√¢y d·ª±ng gi·∫£i ph√°p **Power Automate s·ª≠ d·ª•ng `Do Until` + h√†ng ƒë·ª£i t·ª± qu·∫£n l√Ω (`PendingFolders`)**, **kh√¥ng d√πng Child Flow**, nh·∫±m **duy·ªát to√†n b·ªô file trong SharePoint bao g·ªìm subfolder**, **kh√¥ng gi·ªõi h·∫°n c·∫•p ƒë·ªô folder**.

---

## üîÅ T·ªïng quan gi·∫£i ph√°p

| Th√†nh ph·∫ßn         | M·ª•c ƒë√≠ch                                      |
|-------------------|-----------------------------------------------|
| `Do Until` loop   | Duy·ªát qua t·ª´ng folder c√≤n trong danh s√°ch     |
| `PendingFolders`  | M·∫£ng ch·ª©a c√°c folder c·∫ßn x·ª≠ l√Ω (m√¥ ph·ªèng queue) |
| `AllFiles`        | M·∫£ng ch·ª©a to√†n b·ªô file t√¨m ƒë∆∞·ª£c               |
| `List folder`     | Tr·∫£ v·ªÅ danh s√°ch item (g·ªìm file + folder)     |

---

## üèó STEP-BY-STEP X√ÇY D·ª∞NG FLOW

---

### üü¢ **1. T·∫°o Flow m·ªõi**

1. Truy c·∫≠p [Power Automate Portal](https://make.powerautomate.com)
2. Ch·ªçn **+ Create > Instant Cloud Flow**
3. T√™n: `GetAllFilesRecursively`
4. Trigger: `Manually trigger a flow`
5. Add input: `RootFolderPath` (Text)

---

### üü° **2. Kh·ªüi t·∫°o bi·∫øn**

| T√™n bi·∫øn         | Ki·ªÉu d·ªØ li·ªáu | Gi√° tr·ªã kh·ªüi t·∫°o                         |
|------------------|--------------|------------------------------------------|
| `PendingFolders` | Array        | `createArray(triggerBody()['RootFolderPath'])` |
| `AllFiles`       | Array        | `[]`                                      |

---

### üîÅ **3. T·∫°o Do Until**

**ƒêi·ªÅu ki·ªán d·ª´ng:**  
`length(variables('PendingFolders'))` is equal to `0`

---

### üîÑ **4. Trong Do Until: C√°c b∆∞·ªõc x·ª≠ l√Ω**

#### üü¶ a. L·∫•y folder ƒë·∫ßu ti√™n
- **Compose** (T√™n: `CurrentFolder`)
  - Expression:
    ```plaintext
    first(variables('PendingFolders'))
    ```

#### üüß b. X√≥a folder ƒë·∫ßu ti√™n kh·ªèi queue
- **Compose** (T√™n: `RemainingFolders`)
  - Expression:
    ```plaintext
    skip(variables('PendingFolders'), 1)
    ```

#### üü® c. D√πng action `List folder`
- Action: `List folder`
- Site: ch·ªçn site c·ªßa b·∫°n
- Folder Path: `outputs('CurrentFolder')`

> L∆∞u √Ω: `List folder` tr·∫£ v·ªÅ c·∫£ **file v√† folder** trong th∆∞ m·ª•c ƒë√≥.

#### üü© d. Duy·ªát t·ª´ng item (Apply to each)

- **Apply to each**: `value` c·ªßa output t·ª´ `List folder`

**B√™n trong Apply to each:**

##### i. ƒêi·ªÅu ki·ªán: l√† file hay folder?

- Add Condition:
  ```plaintext
  empty(items('Apply_to_each')?['Folder'])
  ```

- N·∫øu l√† **file** (t·ª©c ƒëi·ªÅu ki·ªán ƒë√∫ng):
  - `Append to array variable`: `AllFiles`
    - Gi√° tr·ªã:
      ```json
      {
        "Name": "@items('Apply_to_each')?['Name']",
        "Path": "@items('Apply_to_each')?['Path']"
      }
      ```

- N·∫øu l√† **folder**:
  - `Append to array variable`: `RemainingFolders`  
    (th√™m path c·ªßa subfolder v√†o queue)
    - Gi√° tr·ªã: `items('Apply_to_each')?['Path']`

> B·∫°n ƒëang t·ª± c·∫≠p nh·∫≠t queue trong v√≤ng l·∫∑p.

#### üü™ e. C·∫≠p nh·∫≠t l·∫°i PendingFolders sau v√≤ng l·∫∑p

- Action: `Set variable`: `PendingFolders`  
  - Gi√° tr·ªã: `outputs('RemainingFolders')`

---

### üü´ **5. Sau khi k·∫øt th√∫c Do Until**

B·∫°n ƒë√£ c√≥ to√†n b·ªô file trong bi·∫øn `AllFiles`.

B·∫°n c√≥ th·ªÉ:
- Xu·∫•t ra Excel (`Create CSV table`)
- T·∫°o file log
- G·ª≠i email, ho·∫∑c
- D√πng cho c√°c b∆∞·ªõc ti·∫øp theo trong quy tr√¨nh

---

## ‚úÖ T√≥m t·∫Øt c√°c b∆∞·ªõc

| B∆∞·ªõc | M·ª•c ti√™u |
|------|----------|
| 1    | Nh·∫≠n folder g·ªëc |
| 2    | Kh·ªüi t·∫°o `PendingFolders` = `[g·ªëc]`, `AllFiles = []` |
| 3    | `Do Until` khi queue c√≤n ph·∫ßn t·ª≠ |
| 4    | L·∫∑p:
   - L·∫•y folder ƒë·∫ßu ti√™n
   - X√≥a kh·ªèi queue
   - `List folder` ‚Üí ph√¢n lo·∫°i file / folder
   - G·ªôp file v√†o `AllFiles`
   - Th√™m subfolder v√†o queue |
| 5    | Sau Do Until: b·∫°n c√≥ t·∫•t c·∫£ file |

---

## üîÅ Ghi nh·ªõ:

- **Kh√¥ng c·∫ßn child flow**
- Ch·∫°y ƒë∆∞·ª£c v·ªõi **folder s√¢u nhi·ªÅu c·∫•p**
- Kh√¥ng ph·ª• thu·ªôc s·ªë l∆∞·ª£ng subfolder
- T·ªëc ƒë·ªô s·∫Ω ch·∫≠m n·∫øu folder c√≥ h√†ng ng√†n file ‚Üí c√¢n nh·∫Øc chia batch

---

## üì• B·∫°n c·∫ßn file m·∫´u .zip ƒë·ªÉ import?

M√¨nh c√≥ th·ªÉ chu·∫©n b·ªã s·∫µn ƒë·ªÉ b·∫°n ch·ªâ c·∫ßn:
- Import v√†o Power Automate
- Ch·ªânh s·ª≠a Site URL v√† th∆∞ m·ª•c g·ªëc

N·∫øu b·∫°n c·∫ßn, nh·∫Øn m√¨nh ngay nh√©!
===========================================
D∆∞·ªõi ƒë√¢y l√† **h∆∞·ªõng d·∫´n step-by-step** chi ti·∫øt v·ªÅ c√°ch **g·ªçi l·∫°i API cho m·ªói subfolder** trong SharePoint ƒë·ªÉ ti·∫øp t·ª•c l·∫•y file t·ª´ c√°c folder con m√† kh√¥ng bi·∫øt tr∆∞·ªõc s·ªë l∆∞·ª£ng subfolder v√† c·∫•p ƒë·ªô. C√°ch n√†y s·∫Ω s·ª≠ d·ª•ng **ƒë·ªá quy** ƒë·ªÉ ti·∫øp t·ª•c g·ªçi API cho c√°c subfolder ƒë·∫øn khi kh√¥ng c√≤n subfolder n√†o.

---

## üèó **B∆∞·ªõc 1: T·∫°o Flow v√† Trigger**

1. **T·∫°o Flow m·ªõi** trong Power Automate:
   - Truy c·∫≠p v√†o Power Automate Portal.
   - Ch·ªçn **Create > Instant Cloud Flow**.
   - Ch·ªçn trigger: **Manually trigger a flow** (ho·∫∑c trigger theo y√™u c·∫ßu c·ªßa b·∫°n).
   - Th√™m **Input**: 
     - `RootFolderPath` (Text): ƒê∆∞·ªùng d·∫´n folder g·ªëc trong SharePoint m√† b·∫°n mu·ªën b·∫Øt ƒë·∫ßu t√¨m ki·∫øm (VD: `Shared Documents/Reports`).

---

## üßë‚Äçüíª **B∆∞·ªõc 2: G·ªçi API l·∫ßn ƒë·∫ßu ƒë·ªÉ l·∫•y folder v√† file trong folder g·ªëc**

1. **Add action** `Send an HTTP request to SharePoint`:
   - **Site Address**: Ch·ªçn site SharePoint c·ªßa b·∫°n (v√≠ d·ª•: `https://contoso.sharepoint.com/sites/yoursite`).
   - **Method**: `GET`.
   - **Uri**: C·∫•u tr√∫c ƒë∆∞·ªùng d·∫´n API ƒë·ªÉ l·∫•y file v√† folder:
     ```plaintext
     /_api/web/GetFolderByServerRelativeUrl('@{triggerBody()['RootFolderPath']}')/Folders?$expand=Folders,Files
     ```
     > L∆∞u √Ω: `@{triggerBody()['RootFolderPath']}` l√† gi√° tr·ªã b·∫°n nh·∫≠p t·ª´ trigger (ƒë∆∞·ªùng d·∫´n c·ªßa folder g·ªëc).

2. **C·∫•u h√¨nh Headers** (t√πy ch·ªçn):
   - **Accept**: `application/json`.
   - **Content-Type**: `application/json`.

---

## üßë‚Äçüíª **B∆∞·ªõc 3: Parse JSON ƒë·ªÉ x·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ API**

1. **Add action** `Parse JSON` ƒë·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API:
   - **Content**: Ch·ªçn `Body` c·ªßa action `Send an HTTP request to SharePoint`.
   - **Schema**: S·ª≠ d·ª•ng schema sau ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu tr·∫£ v·ªÅ:

```json
{
  "type": "object",
  "properties": {
    "Files": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Name": { "type": "string" },
          "ServerRelativeUrl": { "type": "string" }
        }
      }
    },
    "Folders": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Name": { "type": "string" },
          "ServerRelativeUrl": { "type": "string" }
        }
      }
    }
  }
}
```

---

## üßë‚Äçüíª **B∆∞·ªõc 4: X·ª≠ l√Ω c√°c file v√† subfolder**

1. **Duy·ªát qua c√°c file trong folder**:
   - **Add action** `Apply to each` ƒë·ªÉ duy·ªát qua m·∫£ng `Files` trong k·∫øt qu·∫£ `Parse JSON`.
   - Trong v√≤ng l·∫∑p n√†y, b·∫°n c√≥ th·ªÉ l∆∞u l·∫°i t√™n file, ƒë∆∞·ªùng d·∫´n ho·∫∑c t·∫£i file v·ªÅ.

   V√≠ d·ª•, l∆∞u l·∫°i t√™n v√† ƒë∆∞·ªùng d·∫´n file:
   - **Append to array variable**: `AllFiles`
     ```json
     {
       "Name": "@items('Apply_to_each')?['Name']",
       "Path": "@items('Apply_to_each')?['ServerRelativeUrl']"
     }
     ```

2. **Duy·ªát qua c√°c subfolder**:
   - **Add action** `Apply to each` ƒë·ªÉ duy·ªát qua m·∫£ng `Folders` trong k·∫øt qu·∫£ `Parse JSON`.
   - Trong v√≤ng l·∫∑p n√†y, b·∫°n c·∫ßn ti·∫øp t·ª•c g·ªçi l·∫°i **API** cho m·ªói subfolder ƒë·ªÉ l·∫•y c√°c file v√† folder b√™n trong.

---

## üßë‚Äçüíª **B∆∞·ªõc 5: ƒê·ªá quy (G·ªçi l·∫°i API cho subfolder)**

### a. **T·∫°o m·ªôt function ho·∫∑c g·ªçi API trong v√≤ng l·∫∑p**

1. **Duy·ªát c√°c subfolder**:
   - Th√™m action `Apply to each` cho m·∫£ng `Folders` (t·ª´ k·∫øt qu·∫£ `Parse JSON`).
   - **Value**: `Folders` (t·ª´ output c·ªßa Parse JSON).

2. **G·ªçi l·∫°i API cho subfolder**:
   - Trong v√≤ng l·∫∑p n√†y, b·∫°n s·∫Ω c·∫ßn g·ªçi l·∫°i API **Send an HTTP request to SharePoint** cho m·ªói subfolder:
   
   - **Uri**: C·∫≠p nh·∫≠t URI ƒë·ªÉ l·∫•y c√°c file v√† folder trong subfolder:
     ```plaintext
     /_api/web/GetFolderByServerRelativeUrl('@{items('Apply_to_each')?['ServerRelativeUrl']}')/Folders?$expand=Folders,Files
     ```
     ·ªû ƒë√¢y, `@{items('Apply_to_each')?['ServerRelativeUrl']}` ch√≠nh l√† ƒë∆∞·ªùng d·∫´n c·ªßa subfolder m√† b·∫°n ƒëang duy·ªát.

   - **Ph√¢n t√≠ch JSON** cho k·∫øt qu·∫£ tr·∫£ v·ªÅ c·ªßa API.
   
3. **X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ subfolder**:
   - Sau khi g·ªçi l·∫°i API, b·∫°n c·∫ßn:
     - Duy·ªát qua c√°c file trong subfolder nh∆∞ b∆∞·ªõc 4.
     - Duy·ªát qua c√°c subfolder con (n·∫øu c√≥), g·ªçi l·∫°i API cho c√°c subfolder ƒë√≥.

---

### b. **L·∫∑p l·∫°i cho m·ªói c·∫•p subfolder**

N·∫øu c√≥ nhi·ªÅu c·∫•p folder, b·∫°n c·∫ßn ti·∫øp t·ª•c g·ªçi l·∫°i API cho c√°c subfolder c·∫•p sau cho ƒë·∫øn khi kh√¥ng c√≤n folder con n√†o.

---

## üßë‚Äçüíª **B∆∞·ªõc 6: K·∫øt th√∫c v√† x·ª≠ l√Ω k·∫øt qu·∫£**

Sau khi g·ªçi ƒë·ªá quy v√† duy·ªát qua t·∫•t c·∫£ c√°c file v√† subfolder:

1. **L∆∞u tr·ªØ c√°c file**: B·∫°n c√≥ th·ªÉ l∆∞u t·∫•t c·∫£ file v√†o m·ªôt m·∫£ng, l∆∞u ra Excel, ho·∫∑c th·ª±c hi·ªán thao t√°c kh√°c v·ªõi c√°c file ƒë√£ l·∫•y ƒë∆∞·ª£c.
2. **G·ª≠i k·∫øt qu·∫£**: Xu·∫•t ra b·∫£ng d·ªØ li·ªáu, g·ª≠i email, ho·∫∑c c√°c thao t√°c x·ª≠ l√Ω ti·∫øp theo.

---

## üìã **T√≥m t·∫Øt Flow**:

| B∆∞·ªõc | Action                                | M√¥ t·∫£                              |
|------|---------------------------------------|------------------------------------|
| 1    | **Manually trigger a flow**           | Nh·∫≠p ƒë∆∞·ªùng d·∫´n folder g·ªëc         |
| 2    | **Send an HTTP request to SharePoint** | G·ªçi API l·∫•y file v√† subfolder    |
| 3    | **Parse JSON**                        | Ph√¢n t√≠ch k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API   |
| 4    | **Apply to each (Files)**             | Duy·ªát qua t·ª´ng file               |
| 5    | **Apply to each (Folders)**           | Duy·ªát qua t·ª´ng subfolder          |
| 6    | **Send HTTP request (recursive)**     | G·ªçi l·∫°i API cho m·ªói subfolder     |
| 7    | **Export/Process Files**              | Xu·∫•t d·ªØ li·ªáu ho·∫∑c x·ª≠ l√Ω ti·∫øp      |

---

### üìà **L∆∞u √Ω**:
- **Kh√¥ng gi·ªõi h·∫°n s·ªë l∆∞·ª£ng subfolder**: Quy tr√¨nh n√†y s·∫Ω ti·∫øp t·ª•c g·ªçi l·∫°i API cho m·ªói subfolder cho ƒë·∫øn khi kh√¥ng c√≤n subfolder n√†o.
- **Hi·ªáu qu·∫£ h∆°n `Do Until`**: ƒê·ªá quy gi√∫p x·ª≠ l√Ω hi·ªáu qu·∫£ v√† kh√¥ng c·∫ßn duy tr√¨ m·ªôt m·∫£ng qu√° l·ªõn trong b·ªô nh·ªõ.
- **ƒê·∫£m b·∫£o c√≥ paging**: N·∫øu c√≥ h√†ng ngh√¨n folder, SharePoint s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ theo t·ª´ng trang. B·∫°n c·∫ßn x·ª≠ l√Ω paging khi s·ªë l∆∞·ª£ng item v∆∞·ª£t qu√° gi·ªõi h·∫°n (m·∫∑c ƒë·ªãnh 100).

---

N·∫øu b·∫°n c·∫ßn th√™m h∆∞·ªõng d·∫´n v·ªÅ c√°ch x·ª≠ l√Ω paging trong SharePoint API ho·∫∑c mu·ªën t√¥i gi√∫p b·∫°n t·∫°o s·∫µn flow m·∫´u, ƒë·ª´ng ng·∫ßn ng·∫°i y√™u c·∫ßu nh√©!
